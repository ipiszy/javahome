/*
 * SnifferView.java
 */
package sniffer;

import core.Analyzer;
import core.Capture;
import core.Filter;
import core.Storage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.util.Vector;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import net.sourceforge.jpcap.net.EthernetPacket;
import net.sourceforge.jpcap.net.Packet;
import org.jdesktop.application.ResourceMap;

/**
 * The application's main frame.
 */
public class SnifferView extends FrameView {

	private Packet currentPacket;

	public SnifferView(SingleFrameApplication app) {
		super(app);
		networkModel = new NetworkPacketTableModel();
		initComponents();
		TableColumn timeColumn = packetList.getColumnModel().getColumn(0);
		timeColumn.setPreferredWidth(80);
		timeColumn.setMaxWidth(80);
		timeColumn.setMinWidth(80);

		TableColumn srcIPColumn = packetList.getColumnModel().getColumn(1);
		srcIPColumn.setPreferredWidth(120);
		srcIPColumn.setMaxWidth(120);
		srcIPColumn.setMinWidth(120);

		TableColumn destIPColumn = packetList.getColumnModel().getColumn(2);
		destIPColumn.setPreferredWidth(120);
		destIPColumn.setMaxWidth(120);
		destIPColumn.setMinWidth(120);

//		packetInformationPanel = new PacketInformationPanel();
//		JFrame frame = new JFrame();
//		frame.add(packetInformationPanel);
//		frame.setVisible(true);
//		frame.setSize(543, 550);
//		frame.setResizable(false);

		// status bar initialization - message timeout, idle icon and busy animation, etc
		ResourceMap resourceMap = getResourceMap();
	}

	@Action
	public void showAboutBox() {
		if (aboutBox == null) {
			JFrame mainFrame = SnifferApp.getApplication().getMainFrame();
			aboutBox = new SnifferAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}
		SnifferApp.getApplication().show(aboutBox);
	}

	public void setStorage(Storage s) {
		this.storage = s;
	}

	public void setCapturer(Capture c) {
		this.capturer = c;
		c.view = this;
		this.devicesSelector.removeAllItems();
		for (String dev : c.m_device) {
			this.devicesSelector.addItem(dev.substring(dev.indexOf('\n') + 1));
		}
	}

	public void refreshUI(boolean force) {
//		if (!force && System.currentTimeMillis() - lastRefreshed < 100)
//			return;
		String[][] data = this.storage.export(filter);
		this.networkModel.clear();
		for (String[] row : data) {
			Vector<Object> v = new Vector<Object>();
			for (String s : row) {
				v.add(s);
			}
			this.networkModel.addRow(v);
		}
		lastRefreshed = System.currentTimeMillis();
		this.packetList.revalidate();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                mainPanel = new javax.swing.JPanel();
                packetInformationPanel = new sniffer.PacketInformationPanel();
                controlPanel = new javax.swing.JPanel();
                stopButton = new javax.swing.JButton();
                startButton = new javax.swing.JButton();
                devicesSelector = new javax.swing.JComboBox();
                jLabel1 = new javax.swing.JLabel();
                jButton2 = new javax.swing.JButton();
                jScrollPane1 = new javax.swing.JScrollPane();
                packetList = new javax.swing.JTable();
                jPanel1 = new javax.swing.JPanel();
                filterTextField = new javax.swing.JTextField();
                jLabel2 = new javax.swing.JLabel();
                jButton1 = new javax.swing.JButton();

                mainPanel.setName("mainPanel"); // NOI18N
                mainPanel.setNextFocusableComponent(packetInformationPanel);

                packetInformationPanel.setName("packetInformationPanel"); // NOI18N

                controlPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                controlPanel.setName("controlPanel"); // NOI18N

                javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(sniffer.SnifferApp.class).getContext().getActionMap(SnifferView.class, this);
                stopButton.setAction(actionMap.get("stopClicked")); // NOI18N
                org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(sniffer.SnifferApp.class).getContext().getResourceMap(SnifferView.class);
                stopButton.setText(resourceMap.getString("stopButton.text")); // NOI18N
                stopButton.setName("stopButton"); // NOI18N

                startButton.setAction(actionMap.get("startClicked")); // NOI18N
                startButton.setText(resourceMap.getString("startButton.text")); // NOI18N
                startButton.setName("startButton"); // NOI18N

                devicesSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
                devicesSelector.setName("devicesSelector"); // NOI18N

                jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
                jLabel1.setName("jLabel1"); // NOI18N

                jButton2.setAction(actionMap.get("saveClicked")); // NOI18N
                jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
                jButton2.setName("jButton2"); // NOI18N

                javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
                controlPanel.setLayout(controlPanelLayout);
                controlPanelLayout.setHorizontalGroup(
                        controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(devicesSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                                .addComponent(startButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2)
                                .addGap(15, 15, 15))
                );
                controlPanelLayout.setVerticalGroup(
                        controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(controlPanelLayout.createSequentialGroup()
                                .addGap(0, 6, Short.MAX_VALUE)
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton2)
                                        .addComponent(jLabel1)
                                        .addComponent(devicesSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(startButton)
                                        .addComponent(stopButton))
                                .addGap(0, 12, Short.MAX_VALUE))
                );

                jScrollPane1.setName("jScrollPane1"); // NOI18N

                packetList.setModel(networkModel);
                packetList.setColumnSelectionAllowed(true);
                packetList.setName("packetList"); // NOI18N
                packetList.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                packetListMouseClicked(evt);
                        }
                });
                packetList.addKeyListener(new java.awt.event.KeyAdapter() {
                        public void keyReleased(java.awt.event.KeyEvent evt) {
                                packetListKeyReleased(evt);
                        }
                });
                jScrollPane1.setViewportView(packetList);
                packetList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

                jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                jPanel1.setName("filterPanel"); // NOI18N

                filterTextField.setText(resourceMap.getString("filterTextField.text")); // NOI18N
                filterTextField.setName("filterTextField"); // NOI18N

                jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
                jLabel2.setName("jLabel2"); // NOI18N

                jButton1.setAction(actionMap.get("filterApplyClicked")); // NOI18N
                jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
                jButton1.setName("jButton1"); // NOI18N

                javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addContainerGap(50, Short.MAX_VALUE))
                );
                jPanel1Layout.setVerticalGroup(
                        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jButton1)
                                        .addComponent(filterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
                mainPanel.setLayout(mainPanelLayout);
                mainPanelLayout.setHorizontalGroup(
                        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(packetInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(11, Short.MAX_VALUE))
                );
                mainPanelLayout.setVerticalGroup(
                        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(packetInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(mainPanelLayout.createSequentialGroup()
                                                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                setComponent(mainPanel);
        }// </editor-fold>//GEN-END:initComponents

    private void packetListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_packetListMouseClicked
	    // TODO add your handling code here:
	    updatePacketInformation();
    }//GEN-LAST:event_packetListMouseClicked

    private void packetListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_packetListKeyReleased
	    // TODO add your handling code here:
	    if ((evt.getKeyCode() == java.awt.event.KeyEvent.VK_DOWN) || (evt.getKeyCode() == java.awt.event.KeyEvent.VK_UP)) {
		    updatePacketInformation();
	    }
    }//GEN-LAST:event_packetListKeyReleased

	private void updatePacketInformation() {
		int rowIndex = this.packetList.getSelectedRow();
		Packet p = this.storage.getPacket(rowIndex, this.filter);
		if (packetInformationPanel == null) {
			packetInformationPanel = new PacketInformationPanel();
		}
		if (!packetInfoShowed) {
			packetInformationPanel.setVisible(true);
		}
		packetInformationPanel.showPacketInformation(p);
		this.currentPacket = p;
	}

	@Action
	public void startClicked() {
		this.storage.clear();
		this.capturer.selectDevice(this.devicesSelector.getSelectedIndex());
		this.capturer.init();
		new Thread(this.capturer).start();
	}

	@Action
	public void stopClicked() {
		this.capturer.pause();
		refreshUI(true);
	}

	private String toSimpleHTML(String str) {
		str = str.replace("\n", "<br/>");
		return "<html>" + str + "</html>";
	}

	@Action
	public void filterApplyClicked() {
		String str = filterTextField.getText();
		if (str.trim().length() == 0) {
			filter = null;
			return;
		}
		Filter tmpFilter = Filter.createFilter(str);
		if (tmpFilter == null) {
			JOptionPane.showMessageDialog(null, "Filter Syntax Error!");
			return;
		}
		filter = tmpFilter;

		refreshUI(false);
	}

	@Action
	public void saveClicked() {
		JFileChooser jfc = new JFileChooser();
		int ret = jfc.showSaveDialog(null);
		if (ret == JFileChooser.APPROVE_OPTION) {
			File file = jfc.getSelectedFile();
			String fileName = file.getName();
			try {
				FileWriter headerWriter = new FileWriter(file.getAbsolutePath() + ".meta");
				if (currentPacket instanceof EthernetPacket) {
					headerWriter.write(Analyzer.EthernetInform((EthernetPacket)currentPacket));
				}
				headerWriter.close();
				FileOutputStream headerStream = new FileOutputStream(file.getAbsolutePath() + ".header");
				headerStream.write(currentPacket.getHeader());
				headerStream.close();
				FileOutputStream dataStream = new FileOutputStream(file.getAbsolutePath() + ".data");
				dataStream.write(currentPacket.getData());
				dataStream.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JPanel controlPanel;
        private javax.swing.JComboBox devicesSelector;
        private javax.swing.JTextField filterTextField;
        private javax.swing.JButton jButton1;
        private javax.swing.JButton jButton2;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JPanel mainPanel;
        private sniffer.PacketInformationPanel packetInformationPanel;
        private javax.swing.JTable packetList;
        private javax.swing.JButton startButton;
        private javax.swing.JButton stopButton;
        // End of variables declaration//GEN-END:variables
	private Storage storage;
	private JDialog aboutBox;
	private NetworkPacketTableModel networkModel;
	private Capture capturer;
	private Filter filter;
	private long lastRefreshed = 0;
	private boolean packetInfoShowed = false;
//	private PacketInformationPanel packetInformationPanel;
}
