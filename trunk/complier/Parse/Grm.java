
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jan 03 20:30:45 CST 2009
//----------------------------------------------------

package Parse;

import Absyn.*;
import Symbol.*;

/** CUP v0.10k generated parser.
  * @version Sat Jan 03 20:30:45 CST 2009
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\010\000\002" +
    "\004\006\000\002\004\005\000\002\004\005\000\002\004" +
    "\007\000\002\004\005\000\002\004\004\000\002\004\006" +
    "\000\002\004\010\000\002\004\005\000\002\004\006\000" +
    "\002\004\010\000\002\004\006\000\002\004\010\000\002" +
    "\004\006\000\002\004\012\000\002\004\003\000\002\004" +
    "\007\000\002\004\007\000\002\004\011\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\012\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\011\000\002\004\006\000\002\004\005\000\002\004" +
    "\005\000\002\006\003\000\002\006\005\000\002\006\005" +
    "\000\002\006\007\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\007\000\002\007\005\000\002" +
    "\007\007\000\002\007\007\000\002\007\011\000\002\010" +
    "\005\000\002\010\006\000\002\010\005\000\002\010\006" +
    "\000\002\015\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\013\006\000\002\016\003\000\002\016" +
    "\005\000\002\016\004\000\002\016\005\000\002\020\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\007\000" +
    "\002\017\005\000\002\014\006\000\002\014\010\000\002" +
    "\012\011\000\002\012\010\000\002\012\013\000\002\012" +
    "\011\000\002\012\013\000\002\012\012\000\002\012\015" +
    "\000\002\012\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\036\003\016\004\015\005\013\006\006\010" +
    "\004\026\022\030\017\032\005\037\014\042\007\043\010" +
    "\046\021\052\024\053\011\001\002\000\034\004\015\005" +
    "\013\006\006\010\004\026\022\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\004\003\353\001\002\000\072\002\ufffd\003\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd" +
    "\027\ufffd\031\ufffd\033\ufffd\040\ufffd\041\ufffd\044\ufffd\045" +
    "\ufffd\047\ufffd\050\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002" +
    "\000\034\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\004\004\341\001\002\000\072\002" +
    "\ufffc\003\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\025\ufffc\027\ufffc\031\ufffc\033\ufffc\040\ufffc" +
    "\041\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\001\002\000\004\002\340\001\002\000\072" +
    "\002\ufffe\003\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\022\ufffe\023\ufffe\025\ufffe\027\ufffe\031\ufffe\033\ufffe\040" +
    "\ufffe\041\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\001\002\000\034\004\015\005\013\006" +
    "\006\010\004\026\022\030\017\032\005\037\014\042\007" +
    "\043\010\046\021\052\024\053\011\001\002\000\104\002" +
    "\ufffb\003\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\025\ufffb\026\256\027\ufffb\030\255\031\ufffb" +
    "\032\254\033\ufffb\034\257\035\260\040\ufffb\041\ufffb\044" +
    "\ufffb\045\ufffb\047\ufffb\050\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\001\002\000\004\002\uffff\001\002\000\004\003\252\001" +
    "\002\000\034\002\000\007\037\010\031\011\042\012\033" +
    "\013\036\014\035\015\043\016\040\017\041\020\034\021" +
    "\032\022\044\001\002\000\012\003\107\054\111\055\104" +
    "\056\105\001\002\000\040\003\066\004\015\005\013\006" +
    "\006\010\004\026\022\027\065\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\100\002\ufffa\003\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\025\ufffa\027\ufffa\030\025\031\ufffa" +
    "\033\ufffa\034\026\035\027\040\ufffa\041\ufffa\044\ufffa\045" +
    "\ufffa\047\ufffa\050\ufffa\054\ufffa\055\ufffa\056\ufffa\001\002" +
    "\000\072\002\uffd9\003\uffd9\007\uffd9\010\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\025\uffd9\027\uffd9\031\uffd9\033" +
    "\uffd9\040\uffd9\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\001\002\000\034\004\015\005" +
    "\013\006\006\010\004\026\022\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\004\004\061\001\002\000\034\004\015\005\013\006\006" +
    "\010\004\026\022\030\017\032\005\037\014\042\007\043" +
    "\010\046\021\052\024\053\011\001\002\000\072\002\ufff8" +
    "\003\ufff8\007\037\010\031\011\042\012\033\013\036\014" +
    "\035\015\043\016\040\017\041\020\034\021\032\022\044" +
    "\023\ufff8\025\ufff8\027\ufff8\031\ufff8\033\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\047\ufff8\050\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\001\002\000\034\004\015\005\013\006\006\010" +
    "\004\026\022\030\017\032\005\037\014\042\007\043\010" +
    "\046\021\052\024\053\011\001\002\000\034\004\015\005" +
    "\013\006\006\010\004\026\022\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\034\004\015\005\013\006\006\010\004\026\022\030\017" +
    "\032\005\037\014\042\007\043\010\046\021\052\024\053" +
    "\011\001\002\000\034\004\015\005\013\006\006\010\004" +
    "\026\022\030\017\032\005\037\014\042\007\043\010\046" +
    "\021\052\024\053\011\001\002\000\034\004\015\005\013" +
    "\006\006\010\004\026\022\030\017\032\005\037\014\042" +
    "\007\043\010\046\021\052\024\053\011\001\002\000\034" +
    "\004\015\005\013\006\006\010\004\026\022\030\017\032" +
    "\005\037\014\042\007\043\010\046\021\052\024\053\011" +
    "\001\002\000\034\004\015\005\013\006\006\010\004\026" +
    "\022\030\017\032\005\037\014\042\007\043\010\046\021" +
    "\052\024\053\011\001\002\000\034\004\015\005\013\006" +
    "\006\010\004\026\022\030\017\032\005\037\014\042\007" +
    "\043\010\046\021\052\024\053\011\001\002\000\034\004" +
    "\015\005\013\006\006\010\004\026\022\030\017\032\005" +
    "\037\014\042\007\043\010\046\021\052\024\053\011\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\034\004\015\005\013\006\006" +
    "\010\004\026\022\030\017\032\005\037\014\042\007\043" +
    "\010\046\021\052\024\053\011\001\002\000\034\004\015" +
    "\005\013\006\006\010\004\026\022\030\017\032\005\037" +
    "\014\042\007\043\010\046\021\052\024\053\011\001\002" +
    "\000\072\002\uffeb\003\uffeb\007\037\010\031\011\042\012" +
    "\033\013\036\014\035\015\043\016\040\017\041\020\034" +
    "\021\032\022\uffeb\023\uffeb\025\uffeb\027\uffeb\031\uffeb\033" +
    "\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\001\002\000\056\002\uffef\003" +
    "\uffef\007\037\010\031\011\042\012\033\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\027\uffef\031\uffef\033\uffef\040\uffef\041" +
    "\uffef\044\uffef\045\uffef\047\uffef\050\uffef\054\uffef\055\uffef" +
    "\056\uffef\001\002\000\072\002\ufff4\003\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\027" +
    "\ufff4\031\ufff4\033\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4" +
    "\047\ufff4\050\ufff4\054\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\056\002\ufff0\003\ufff0\007\037\010\031\011\042\012\033" +
    "\021\ufff0\022\ufff0\023\ufff0\025\ufff0\027\ufff0\031\ufff0\033" +
    "\ufff0\040\ufff0\041\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\001\002\000\056\002\uffed\003" +
    "\uffed\007\037\010\031\011\042\012\033\021\uffed\022\uffed" +
    "\023\uffed\025\uffed\027\uffed\031\uffed\033\uffed\040\uffed\041" +
    "\uffed\044\uffed\045\uffed\047\uffed\050\uffed\054\uffed\055\uffed" +
    "\056\uffed\001\002\000\072\002\ufff6\003\ufff6\007\ufff6\010" +
    "\ufff6\011\042\012\033\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\025\ufff6\027" +
    "\ufff6\031\ufff6\033\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6" +
    "\047\ufff6\050\ufff6\054\ufff6\055\ufff6\056\ufff6\001\002\000" +
    "\056\002\ufff2\003\ufff2\007\037\010\031\011\042\012\033" +
    "\021\ufff2\022\ufff2\023\ufff2\025\ufff2\027\ufff2\031\ufff2\033" +
    "\ufff2\040\ufff2\041\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\001\002\000\056\002\ufff1\003" +
    "\ufff1\007\037\010\031\011\042\012\033\021\ufff1\022\ufff1" +
    "\023\ufff1\025\ufff1\027\ufff1\031\ufff1\033\ufff1\040\ufff1\041" +
    "\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\054\ufff1\055\ufff1" +
    "\056\ufff1\001\002\000\056\002\uffee\003\uffee\007\037\010" +
    "\031\011\042\012\033\021\uffee\022\uffee\023\uffee\025\uffee" +
    "\027\uffee\031\uffee\033\uffee\040\uffee\041\uffee\044\uffee\045" +
    "\uffee\047\uffee\050\uffee\054\uffee\055\uffee\056\uffee\001\002" +
    "\000\072\002\ufff3\003\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\023\ufff3\025\ufff3\027\ufff3\031\ufff3\033" +
    "\ufff3\040\ufff3\041\ufff3\044\ufff3\045\ufff3\047\ufff3\050\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\001\002\000\072\002\uffec\003" +
    "\uffec\007\037\010\031\011\042\012\033\013\036\014\035" +
    "\015\043\016\040\017\041\020\034\021\uffec\022\uffec\023" +
    "\uffec\025\uffec\027\uffec\031\uffec\033\uffec\040\uffec\041\uffec" +
    "\044\uffec\045\uffec\047\uffec\050\uffec\054\uffec\055\uffec\056" +
    "\uffec\001\002\000\072\002\ufff5\003\ufff5\007\ufff5\010\ufff5" +
    "\011\042\012\033\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\025\ufff5\027\ufff5" +
    "\031\ufff5\033\ufff5\040\ufff5\041\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\054\ufff5\055\ufff5\056\ufff5\001\002\000\100" +
    "\002\uffbc\003\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\044\uffbc\045\uffbc" +
    "\047\uffbc\050\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000" +
    "\034\007\037\010\031\011\042\012\033\013\036\014\035" +
    "\015\043\016\040\017\041\020\034\021\032\022\044\031" +
    "\063\001\002\000\100\002\uffbb\003\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\025\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041" +
    "\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\001\002\000\040\007\037\010\031\011\042\012" +
    "\033\013\036\014\035\015\043\016\040\017\041\020\034" +
    "\021\032\022\044\025\uffca\027\uffca\050\uffca\001\002\000" +
    "\072\002\uffe3\003\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\027\uffe3\031\uffe3\033\uffe3" +
    "\040\uffe3\041\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\054" +
    "\uffe3\055\uffe3\056\uffe3\001\002\000\006\025\077\027\100" +
    "\001\002\000\006\025\071\027\070\001\002\000\072\002" +
    "\uffe6\003\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\025\uffe6\027\uffe6\031\uffe6\033\uffe6\040\uffe6" +
    "\041\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\001\002\000\036\003\072\004\015\005\013" +
    "\006\006\010\004\026\022\030\017\032\005\037\014\042" +
    "\007\043\010\046\021\052\024\053\011\001\002\000\006" +
    "\025\074\027\075\001\002\000\040\007\037\010\031\011" +
    "\042\012\033\013\036\014\035\015\043\016\040\017\041" +
    "\020\034\021\032\022\044\025\uffc8\027\uffc8\050\uffc8\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\072\002\uffe5\003\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025\uffe5" +
    "\027\uffe5\031\uffe5\033\uffe5\040\uffe5\041\uffe5\044\uffe5\045" +
    "\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002" +
    "\000\040\007\037\010\031\011\042\012\033\013\036\014" +
    "\035\015\043\016\040\017\041\020\034\021\032\022\044" +
    "\025\uffc7\027\uffc7\050\uffc7\001\002\000\034\004\015\005" +
    "\013\006\006\010\004\026\022\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\072\002\uffe4\003\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\025\uffe4\027\uffe4\031\uffe4\033\uffe4" +
    "\040\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\001\002\000\040\007\037\010\031" +
    "\011\042\012\033\013\036\014\035\015\043\016\040\017" +
    "\041\020\034\021\032\022\044\025\uffc9\027\uffc9\050\uffc9" +
    "\001\002\000\014\003\uffba\047\uffba\054\uffba\055\uffba\056" +
    "\uffba\001\002\000\014\003\uffb4\047\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\001\002\000\004\004\243\001\002\000\004\004" +
    "\225\001\002\000\014\003\202\047\201\054\111\055\104" +
    "\056\105\001\002\000\012\047\166\054\111\055\104\056" +
    "\105\001\002\000\014\003\uffb6\047\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\001\002\000\004\004\113\001\002\000\014\003" +
    "\uffb5\047\uffb5\054\uffb5\055\uffb5\056\uffb5\001\002\000\004" +
    "\026\114\001\002\000\010\003\120\004\115\027\117\001" +
    "\002\000\004\024\164\001\002\000\006\023\141\027\142" +
    "\001\002\000\006\013\133\024\134\001\002\000\006\023" +
    "\122\027\123\001\002\000\010\023\uffae\027\uffae\033\uffae" +
    "\001\002\000\004\004\115\001\002\000\006\013\124\024" +
    "\125\001\002\000\034\004\015\005\013\006\006\010\004" +
    "\026\022\030\017\032\005\037\014\042\007\043\010\046" +
    "\021\052\024\053\011\001\002\000\004\004\126\001\002" +
    "\000\004\013\127\001\002\000\034\004\015\005\013\006" +
    "\006\010\004\026\022\030\017\032\005\037\014\042\007" +
    "\043\010\046\021\052\024\053\011\001\002\000\044\003" +
    "\uffa0\007\037\010\031\011\042\012\033\013\036\014\035" +
    "\015\043\016\040\017\041\020\034\021\032\022\044\047" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\001\002\000\044\003\uffa4" +
    "\007\037\010\031\011\042\012\033\013\036\014\035\015" +
    "\043\016\040\017\041\020\034\021\032\022\044\047\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\001\002\000\010\023\uffad\027" +
    "\uffad\033\uffad\001\002\000\034\004\015\005\013\006\006" +
    "\010\004\026\022\030\017\032\005\037\014\042\007\043" +
    "\010\046\021\052\024\053\011\001\002\000\004\004\135" +
    "\001\002\000\004\013\136\001\002\000\034\004\015\005" +
    "\013\006\006\010\004\026\022\030\017\032\005\037\014" +
    "\042\007\043\010\046\021\052\024\053\011\001\002\000" +
    "\044\003\uffa2\007\037\010\031\011\042\012\033\013\036" +
    "\014\035\015\043\016\040\017\041\020\034\021\032\022" +
    "\044\047\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000\044" +
    "\003\uffa6\007\037\010\031\011\042\012\033\013\036\014" +
    "\035\015\043\016\040\017\041\020\034\021\032\022\044" +
    "\047\uffa6\054\uffa6\055\uffa6\056\uffa6\001\002\000\006\003" +
    "\151\004\115\001\002\000\006\013\143\024\144\001\002" +
    "\000\034\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\004\004\145\001\002\000\004\013" +
    "\146\001\002\000\034\004\015\005\013\006\006\010\004" +
    "\026\022\030\017\032\005\037\014\042\007\043\010\046" +
    "\021\052\024\053\011\001\002\000\044\003\uffa3\007\037" +
    "\010\031\011\042\012\033\013\036\014\035\015\043\016" +
    "\040\017\041\020\034\021\032\022\044\047\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\001\002\000\044\003\uffa7\007\037\010" +
    "\031\011\042\012\033\013\036\014\035\015\043\016\040" +
    "\017\041\020\034\021\032\022\044\047\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\001\002\000\006\023\153\027\154\001\002" +
    "\000\010\023\uffac\027\uffac\033\uffac\001\002\000\004\004" +
    "\115\001\002\000\006\013\155\024\156\001\002\000\034" +
    "\004\015\005\013\006\006\010\004\026\022\030\017\032" +
    "\005\037\014\042\007\043\010\046\021\052\024\053\011" +
    "\001\002\000\004\004\157\001\002\000\004\013\160\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\044\003\uffa1\007\037\010\031" +
    "\011\042\012\033\013\036\014\035\015\043\016\040\017" +
    "\041\020\034\021\032\022\044\047\uffa1\054\uffa1\055\uffa1" +
    "\056\uffa1\001\002\000\044\003\uffa5\007\037\010\031\011" +
    "\042\012\033\013\036\014\035\015\043\016\040\017\041" +
    "\020\034\021\032\022\044\047\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\010\023\uffab\027\uffab\033\uffab\001\002" +
    "\000\004\004\165\001\002\000\010\023\uffaa\027\uffaa\033" +
    "\uffaa\001\002\000\040\003\171\004\015\005\013\006\006" +
    "\010\004\026\022\030\017\032\005\037\014\042\007\043" +
    "\010\046\021\050\170\052\024\053\011\001\002\000\014" +
    "\003\uffb9\047\uffb9\054\uffb9\055\uffb9\056\uffb9\001\002\000" +
    "\072\002\uffcd\003\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\025\uffcd\027\uffcd\031\uffcd\033\uffcd" +
    "\040\uffcd\041\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\054" +
    "\uffcd\055\uffcd\056\uffcd\001\002\000\006\025\077\050\177" +
    "\001\002\000\006\025\173\050\174\001\002\000\036\003" +
    "\175\004\015\005\013\006\006\010\004\026\022\030\017" +
    "\032\005\037\014\042\007\043\010\046\021\052\024\053" +
    "\011\001\002\000\072\002\uffd0\003\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\027\uffd0" +
    "\031\uffd0\033\uffd0\040\uffd0\041\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\050\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000\006" +
    "\025\074\050\176\001\002\000\072\002\uffce\003\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\025" +
    "\uffce\027\uffce\031\uffce\033\uffce\040\uffce\041\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce\001" +
    "\002\000\072\002\uffcf\003\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\031\uffcf" +
    "\033\uffcf\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf\050" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\014\003\uffb8" +
    "\047\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\040\003" +
    "\216\004\015\005\013\006\006\010\004\026\022\030\017" +
    "\032\005\037\014\042\007\043\010\046\021\050\215\052" +
    "\024\053\011\001\002\000\012\047\203\054\111\055\104" +
    "\056\105\001\002\000\040\003\206\004\015\005\013\006" +
    "\006\010\004\026\022\030\017\032\005\037\014\042\007" +
    "\043\010\046\021\050\205\052\024\053\011\001\002\000" +
    "\014\003\uffb7\047\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002" +
    "\000\072\002\uffd1\003\uffd1\007\uffd1\010\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\025\uffd1\027\uffd1\031\uffd1\033" +
    "\uffd1\040\uffd1\041\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\001\002\000\006\025\077\050" +
    "\214\001\002\000\006\025\210\050\211\001\002\000\036" +
    "\003\212\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\072\002\uffd4\003\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\025\uffd4\027" +
    "\uffd4\031\uffd4\033\uffd4\040\uffd4\041\uffd4\044\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\006\025\074\050\213\001\002\000\072\002\uffd2\003\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\025\uffd2\027\uffd2\031\uffd2\033\uffd2\040\uffd2\041\uffd2\044" +
    "\uffd2\045\uffd2\047\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\001\002\000\072\002\uffd3\003\uffd3\007\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\025\uffd3\027\uffd3\031" +
    "\uffd3\033\uffd3\040\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3" +
    "\050\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\072\002" +
    "\uffd5\003\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\025\uffd5\027\uffd5\031\uffd5\033\uffd5\040\uffd5" +
    "\041\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\001\002\000\006\025\077\050\224\001\002" +
    "\000\006\025\220\050\221\001\002\000\036\003\222\004" +
    "\015\005\013\006\006\010\004\026\022\030\017\032\005" +
    "\037\014\042\007\043\010\046\021\052\024\053\011\001" +
    "\002\000\072\002\uffd8\003\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8\027\uffd8\031\uffd8" +
    "\033\uffd8\040\uffd8\041\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\006\025\074" +
    "\050\223\001\002\000\072\002\uffd6\003\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\025\uffd6\027" +
    "\uffd6\031\uffd6\033\uffd6\040\uffd6\041\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\054\uffd6\055\uffd6\056\uffd6\001\002\000" +
    "\072\002\uffd7\003\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\025\uffd7\027\uffd7\031\uffd7\033\uffd7" +
    "\040\uffd7\041\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\004\013\226\001\002" +
    "\000\010\004\227\032\230\036\232\001\002\000\014\003" +
    "\uffb2\047\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\010" +
    "\003\236\004\115\033\237\001\002\000\014\003\uffb3\047" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\001\002\000\004\051\233" +
    "\001\002\000\004\004\234\001\002\000\014\003\uffaf\047" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\001\002\000\006\023\240" +
    "\033\241\001\002\000\004\023\122\001\002\000\014\003" +
    "\uffb0\047\uffb0\054\uffb0\055\uffb0\056\uffb0\001\002\000\006" +
    "\003\242\004\115\001\002\000\014\003\uffb1\047\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\001\002\000\004\023\153\001\002" +
    "\000\006\024\244\035\245\001\002\000\004\004\247\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\044\003\uffa9\007\037\010\031" +
    "\011\042\012\033\013\036\014\035\015\043\016\040\017" +
    "\041\020\034\021\032\022\044\047\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\001\002\000\004\035\250\001\002\000\034\004" +
    "\015\005\013\006\006\010\004\026\022\030\017\032\005" +
    "\037\014\042\007\043\010\046\021\052\024\053\011\001" +
    "\002\000\044\003\uffa8\007\037\010\031\011\042\012\033" +
    "\013\036\014\035\015\043\016\040\017\041\020\034\021" +
    "\032\022\044\047\uffa8\054\uffa8\055\uffa8\056\uffa8\001\002" +
    "\000\004\031\253\001\002\000\072\002\uffcc\003\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\025" +
    "\uffcc\027\uffcc\031\uffcc\033\uffcc\040\uffcc\041\uffcc\044\uffcc" +
    "\045\uffcc\047\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc\001" +
    "\002\000\010\003\306\004\305\033\307\001\002\000\034" +
    "\004\015\005\013\006\006\010\004\026\022\030\017\032" +
    "\005\037\014\042\007\043\010\046\021\052\024\053\011" +
    "\001\002\000\040\003\265\004\015\005\013\006\006\010" +
    "\004\026\022\027\264\030\017\032\005\037\014\042\007" +
    "\043\010\046\021\052\024\053\011\001\002\000\004\004" +
    "\262\001\002\000\034\004\015\005\013\006\006\010\004" +
    "\026\022\030\017\032\005\037\014\042\007\043\010\046" +
    "\021\052\024\053\011\001\002\000\072\002\ufff9\003\ufff9" +
    "\007\037\010\031\011\042\012\033\013\036\014\035\015" +
    "\043\016\040\017\041\020\034\021\032\022\044\023\ufff9" +
    "\025\ufff9\027\ufff9\031\ufff9\033\ufff9\040\ufff9\041\ufff9\044" +
    "\ufff9\045\ufff9\047\ufff9\050\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\001\002\000\100\002\uffbe\003\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\025\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\040\uffbe\041\uffbe" +
    "\044\uffbe\045\uffbe\047\uffbe\050\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\001\002\000\036\007\037\010\031\011\042\012\033" +
    "\013\036\014\035\015\043\016\040\017\041\020\034\021" +
    "\032\022\044\023\uffc6\027\uffc6\001\002\000\072\002\uffe7" +
    "\003\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\025\uffe7\027\uffe7\031\uffe7\033\uffe7\040\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\001\002\000\006\023\276\027\277\001\002\000" +
    "\006\023\267\027\270\001\002\000\036\003\271\004\015" +
    "\005\013\006\006\010\004\026\022\030\017\032\005\037" +
    "\014\042\007\043\010\046\021\052\024\053\011\001\002" +
    "\000\072\002\uffea\003\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\025\uffea\027\uffea\031\uffea\033" +
    "\uffea\040\uffea\041\uffea\044\uffea\045\uffea\047\uffea\050\uffea" +
    "\054\uffea\055\uffea\056\uffea\001\002\000\006\023\273\027" +
    "\274\001\002\000\036\007\037\010\031\011\042\012\033" +
    "\013\036\014\035\015\043\016\040\017\041\020\034\021" +
    "\032\022\044\023\uffc4\027\uffc4\001\002\000\034\004\015" +
    "\005\013\006\006\010\004\026\022\030\017\032\005\037" +
    "\014\042\007\043\010\046\021\052\024\053\011\001\002" +
    "\000\072\002\uffe9\003\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\025\uffe9\027\uffe9\031\uffe9\033" +
    "\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\001\002\000\036\007\037\010" +
    "\031\011\042\012\033\013\036\014\035\015\043\016\040" +
    "\017\041\020\034\021\032\022\044\023\uffc3\027\uffc3\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\072\002\uffe8\003\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8" +
    "\027\uffe8\031\uffe8\033\uffe8\040\uffe8\041\uffe8\044\uffe8\045" +
    "\uffe8\047\uffe8\050\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002" +
    "\000\036\007\037\010\031\011\042\012\033\013\036\014" +
    "\035\015\043\016\040\017\041\020\034\021\032\022\044" +
    "\023\uffc5\027\uffc5\001\002\000\034\007\037\010\031\011" +
    "\042\012\033\013\036\014\035\015\043\016\040\017\041" +
    "\020\034\021\032\022\044\031\302\001\002\000\102\002" +
    "\uffbd\003\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\023\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd" +
    "\034\uffbd\035\uffbd\040\uffbd\041\uffbd\044\uffbd\045\uffbd\047" +
    "\uffbd\050\uffbd\051\303\054\uffbd\055\uffbd\056\uffbd\001\002" +
    "\000\034\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\072\002\uffde\003\uffde\007\037\010" +
    "\031\011\042\012\033\013\036\014\035\015\043\016\040" +
    "\017\041\020\034\021\032\022\044\023\uffde\025\uffde\027" +
    "\uffde\031\uffde\033\uffde\040\uffde\041\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\054\uffde\055\uffde\056\uffde\001\002\000" +
    "\004\013\331\001\002\000\006\023\324\033\325\001\002" +
    "\000\072\002\uffe0\003\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\025\uffe0\027\uffe0\031\uffe0\033" +
    "\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\054\uffe0\055\uffe0\056\uffe0\001\002\000\006\023\311\033" +
    "\312\001\002\000\006\003\314\004\313\001\002\000\072" +
    "\002\uffe2\003\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\027\uffe2\031\uffe2\033\uffe2\040" +
    "\uffe2\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\001\002\000\004\013\322\001\002\000" +
    "\006\023\315\033\316\001\002\000\004\004\317\001\002" +
    "\000\072\002\uffe1\003\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\025\uffe1\027\uffe1\031\uffe1\033" +
    "\uffe1\040\uffe1\041\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\001\002\000\004\013\320\001" +
    "\002\000\034\004\015\005\013\006\006\010\004\026\022" +
    "\030\017\032\005\037\014\042\007\043\010\046\021\052" +
    "\024\053\011\001\002\000\036\007\037\010\031\011\042" +
    "\012\033\013\036\014\035\015\043\016\040\017\041\020" +
    "\034\021\032\022\044\023\uffbf\033\uffbf\001\002\000\034" +
    "\004\015\005\013\006\006\010\004\026\022\030\017\032" +
    "\005\037\014\042\007\043\010\046\021\052\024\053\011" +
    "\001\002\000\036\007\037\010\031\011\042\012\033\013" +
    "\036\014\035\015\043\016\040\017\041\020\034\021\032" +
    "\022\044\023\uffc0\033\uffc0\001\002\000\004\004\326\001" +
    "\002\000\072\002\uffdf\003\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\025\uffdf\027\uffdf\031\uffdf" +
    "\033\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf\047\uffdf\050" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002\000\004\013\327" +
    "\001\002\000\034\004\015\005\013\006\006\010\004\026" +
    "\022\030\017\032\005\037\014\042\007\043\010\046\021" +
    "\052\024\053\011\001\002\000\036\007\037\010\031\011" +
    "\042\012\033\013\036\014\035\015\043\016\040\017\041" +
    "\020\034\021\032\022\044\023\uffc1\033\uffc1\001\002\000" +
    "\034\004\015\005\013\006\006\010\004\026\022\030\017" +
    "\032\005\037\014\042\007\043\010\046\021\052\024\053" +
    "\011\001\002\000\036\007\037\010\031\011\042\012\033" +
    "\013\036\014\035\015\043\016\040\017\041\020\034\021" +
    "\032\022\044\023\uffc2\033\uffc2\001\002\000\034\007\037" +
    "\010\031\011\042\012\033\013\036\014\035\015\043\016" +
    "\040\017\041\020\034\021\032\022\044\040\334\001\002" +
    "\000\034\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\072\002\uffdd\003\uffdd\007\037\010" +
    "\031\011\042\012\033\013\036\014\035\015\043\016\040" +
    "\017\041\020\034\021\032\022\044\023\uffdd\025\uffdd\027" +
    "\uffdd\031\uffdd\033\uffdd\040\uffdd\041\336\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000" +
    "\034\004\015\005\013\006\006\010\004\026\022\030\017" +
    "\032\005\037\014\042\007\043\010\046\021\052\024\053" +
    "\011\001\002\000\072\002\uffdc\003\uffdc\007\037\010\031" +
    "\011\042\012\033\013\036\014\035\015\043\016\040\017" +
    "\041\020\034\021\032\022\044\023\uffdc\025\uffdc\027\uffdc" +
    "\031\uffdc\033\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc\047" +
    "\uffdc\050\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\004" +
    "\002\001\001\002\000\004\035\342\001\002\000\034\004" +
    "\015\005\013\006\006\010\004\026\022\030\017\032\005" +
    "\037\014\042\007\043\010\046\021\052\024\053\011\001" +
    "\002\000\034\007\037\010\031\011\042\012\033\013\036" +
    "\014\035\015\043\016\040\017\041\020\034\021\032\022" +
    "\044\044\344\001\002\000\034\004\015\005\013\006\006" +
    "\010\004\026\022\030\017\032\005\037\014\042\007\043" +
    "\010\046\021\052\024\053\011\001\002\000\034\007\037" +
    "\010\031\011\042\012\033\013\036\014\035\015\043\016" +
    "\040\017\041\020\034\021\032\022\044\045\346\001\002" +
    "\000\034\004\015\005\013\006\006\010\004\026\022\030" +
    "\017\032\005\037\014\042\007\043\010\046\021\052\024" +
    "\053\011\001\002\000\072\002\uffda\003\uffda\007\037\010" +
    "\031\011\042\012\033\013\036\014\035\015\043\016\040" +
    "\017\041\020\034\021\032\022\044\023\uffda\025\uffda\027" +
    "\uffda\031\uffda\033\uffda\040\uffda\041\uffda\044\uffda\045\uffda" +
    "\047\uffda\050\uffda\054\uffda\055\uffda\056\uffda\001\002\000" +
    "\034\007\037\010\031\011\042\012\033\013\036\014\035" +
    "\015\043\016\040\017\041\020\034\021\032\022\044\045" +
    "\351\001\002\000\034\004\015\005\013\006\006\010\004" +
    "\026\022\030\017\032\005\037\014\042\007\043\010\046" +
    "\021\052\024\053\011\001\002\000\072\002\uffdb\003\uffdb" +
    "\007\037\010\031\011\042\012\033\013\036\014\035\015" +
    "\043\016\040\017\041\020\034\021\032\022\044\023\uffdb" +
    "\025\uffdb\027\uffdb\031\uffdb\033\uffdb\040\uffdb\041\uffdb\044" +
    "\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\001\002\000\004\033\354\001\002\000\072\002\uffcb\003" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\025\uffcb\027\uffcb\031\uffcb\033\uffcb\040\uffcb\041\uffcb" +
    "\044\uffcb\045\uffcb\047\uffcb\050\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\001\002\000\072\002\ufff7\003\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\027\ufff7" +
    "\031\ufff7\033\ufff7\040\ufff7\041\ufff7\044\ufff7\045\ufff7\047" +
    "\ufff7\050\ufff7\054\ufff7\055\ufff7\056\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\010\003\011\004\017\010\022\001\001\000" +
    "\006\004\354\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\347\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\332\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\101\012\102\013\107\014\111\015\105\001\001\000" +
    "\010\004\063\006\066\010\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\061\010\022\001\001\000" +
    "\002\001\001\000\006\004\027\010\022\001\001\000\002" +
    "\001\001\000\006\004\057\010\022\001\001\000\006\004" +
    "\056\010\022\001\001\000\006\004\055\010\022\001\001" +
    "\000\006\004\054\010\022\001\001\000\006\004\053\010" +
    "\022\001\001\000\006\004\052\010\022\001\001\000\006" +
    "\004\051\010\022\001\001\000\006\004\050\010\022\001" +
    "\001\000\006\004\047\010\022\001\001\000\006\004\046" +
    "\010\022\001\001\000\006\004\045\010\022\001\001\000" +
    "\006\004\044\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\072" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\075\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\100\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\177\012" +
    "\102\013\107\014\111\001\001\000\012\011\166\012\102" +
    "\013\107\014\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\120" +
    "\020\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\131\001\001\000\002\001\001\000\006\004\130\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\127\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\137\010\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\136\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\151\001\001\000\002\001\001\000\006\004\147\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\146\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\162" +
    "\001\001\000\002\001\001\000\006\004\161\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\160" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\063\006\171\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\072\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\063\006\216\010\022\001\001\000\012\011" +
    "\203\012\102\013\107\014\111\001\001\000\010\004\063" +
    "\006\206\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\072" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\072\010\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\230\001" +
    "\001\000\002\001\001\000\006\017\120\020\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\245\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\250\010\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\307\001" +
    "\001\000\006\004\300\010\022\001\001\000\010\004\262" +
    "\005\265\010\022\001\001\000\002\001\001\000\006\004" +
    "\260\010\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\271\010\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\274\010\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\277\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\303\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\320\010\022\001\001\000\002\001" +
    "\001\000\006\004\322\010\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\327\010\022\001\001\000\002\001\001\000\006" +
    "\004\331\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\334\010\022\001\001\000\002\001\001" +
    "\000\006\004\336\010\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\342\010\022" +
    "\001\001\000\002\001\001\000\006\004\344\010\022\001" +
    "\001\000\002\001\001\000\006\004\346\010\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\351\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol sym(String s) {
	         return Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_declaration ::= FUNCTION ID LPAREN error RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),null,new NameTy(tyidleft,Symbol.symbol(tyid)),e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // function_declaration ::= FUNCTION ID LPAREN type_fields COMMA error RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-9)).value;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),tfs,new NameTy(tyidleft,Symbol.symbol(tyid)),e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_declaration ::= FUNCTION ID LPAREN RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),null,new NameTy(tyidleft,Symbol.symbol(tyid)),e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_declaration ::= FUNCTION ID LPAREN type_fields RPAREN COLON ID EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),tfs,new NameTy(tyidleft,Symbol.symbol(tyid)),e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_declaration ::= FUNCTION ID LPAREN error RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),null,null,e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_declaration ::= FUNCTION ID LPAREN type_fields COMMA error RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),tfs,null,e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // function_declaration ::= FUNCTION ID LPAREN RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),null,null,e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_declaration ::= FUNCTION ID LPAREN type_fields RPAREN EQ expr 
            {
              FunctionDec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FunctionDec(fleft,Symbol.symbol(id),tfs,null,e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variable_declaration ::= VAR ID COLON ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new VarDec(vleft,Symbol.symbol(id),new NameTy(tyidleft,Symbol.symbol(tyid)),e);
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variable_declaration ::= VAR ID ASSIGN expr 
            {
              VarDec RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new VarDec(vleft,Symbol.symbol(id),null,e);
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_field ::= ID COLON ID 
            {
              FieldList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldList(idleft,Symbol.symbol(id),Symbol.symbol(tyid),null);
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*type_field*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_fields ::= type_fields COMMA error COMMA type_field 
            {
              FieldList RESULT = null;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldList(tfsleft,tf.name,tf.typ,tfs);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_fields ::= type_fields COMMA type_field 
            {
              FieldList RESULT = null;
		int tfsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tfsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		FieldList tfs = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldList(tfsleft,tf.name,tf.typ,tfs);
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_fields ::= error COMMA type_field 
            {
              FieldList RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = tf;
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_fields ::= type_field 
            {
              FieldList RESULT = null;
		int tfleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tf = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = tf;
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*type_fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object arr = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ArrayTy(arrleft,Symbol.symbol(tyid));
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= LBRACE RBRACE 
            {
              Ty RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new RecordTy(lbleft,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type ::= LBRACE type_fields RBRACE 
            {
              Ty RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyfleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tyfright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldList tyf = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new RecordTy(lbleft,tyf);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type ::= ID 
            {
              Ty RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new NameTy(tyidleft,Symbol.symbol(tyid));
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type_declaration ::= TYPE ID EQ type 
            {
              TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new TypeDec(tleft,Symbol.symbol(tyid),ty,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaration ::= function_declaration 
            {
              Dec RESULT = null;
		int fdeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fderight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FunctionDec fde = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = fde;
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaration ::= variable_declaration 
            {
              Dec RESULT = null;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		VarDec vde = (VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = vde;
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaration ::= type_declaration 
            {
              Dec RESULT = null;
		int tdeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tderight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TypeDec tde = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = tde;
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaration_list ::= declaration_list error declaration 
            {
              DecList RESULT = null;
		int delleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int delright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		DecList del = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Dec de = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new DecList(de,del);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaration_list ::= declaration_list declaration 
            {
              DecList RESULT = null;
		int delleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int delright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		DecList del = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Dec de = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new DecList(de,del);
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaration_list ::= error declaration 
            {
              DecList RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Dec de = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new DecList(de,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaration_list ::= declaration 
            {
              DecList RESULT = null;
		int deleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Dec de = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new DecList(de,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lvalue ::= lvalue LBRACK expr RBRACK 
            {
              Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SubscriptVar(lvleft,lv,e);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldVar(lvleft, lv, Symbol.symbol(id));
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lvalue ::= ID LBRACK expr RBRACK 
            {
              Var RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SubscriptVar(idleft,new SimpleVar(idleft,Symbol.symbol(id)),e);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lvalue ::= ID DOT ID 
            {
              Var RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldVar(id1left, new SimpleVar(id1left,Symbol.symbol(id1)), Symbol.symbol(id2));
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // field_list ::= field_list COMMA error COMMA ID EQ expr 
            {
              FieldExpList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldExpList(flleft,Symbol.symbol(id),e,fl);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // field_list ::= field_list COMMA ID EQ expr 
            {
              FieldExpList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldExpList(flleft,Symbol.symbol(id),e,fl);
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // field_list ::= error COMMA ID EQ expr 
            {
              FieldExpList RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldExpList(idleft,Symbol.symbol(id),e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // field_list ::= ID EQ expr 
            {
              FieldExpList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new FieldExpList(idleft,Symbol.symbol(id),e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*field_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_list ::= expr_list COMMA error COMMA expr 
            {
              ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ExpList(e,el);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_list ::= expr_list COMMA expr 
            {
              ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ExpList(e,el);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_list ::= error COMMA expr 
            {
              ExpList RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ExpList(e,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_list ::= expr 
            {
              ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ExpList(e,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expr_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_seq ::= expr_seq SEMICOLON error SEMICOLON expr 
            {
              SeqExp RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new SeqExp(esleft,new ExpList(e,es.list));
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_seq ::= expr_seq SEMICOLON expr 
            {
              SeqExp RESULT = null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new SeqExp(esleft,new ExpList(e,es.list));
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_seq ::= error SEMICOLON expr 
            {
              SeqExp RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new SeqExp(eleft,new ExpList(e,null));
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_seq ::= expr 
            {
              SeqExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new SeqExp(eleft,new ExpList(e,null));
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*expr_seq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= LBRACE error RBRACE 
            {
              Exp RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new ErrorExp(errleft);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= LBRACK error RBRACK 
            {
              Exp RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new ErrorExp(errleft);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LET error IN END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new LetExp(letexpleft,null,new SeqExp(errright,null));
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LET error IN expr_seq SEMICOLON error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int err1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int err1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object err1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int err2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int err2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,null,es);
			  parser.errorMsg.error(err1left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
			  parser.errorMsg.error(err2left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LET error IN error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int err1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int err1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int err2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int err2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,null,new SeqExp(err2left,null));
			  parser.errorMsg.error(err1left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
			  parser.errorMsg.error(err2left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LET error IN expr_seq END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,null,es);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LET declaration_list error IN END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new LetExp(letexpleft,dl,new SeqExp(dlright,null));
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LET declaration_list error IN expr_seq SEMICOLON error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int err1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int err1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object err1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int err2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int err2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,es);
			  parser.errorMsg.error(err1left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
			  parser.errorMsg.error(err2left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= LET declaration_list error IN error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int err1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int err1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int err2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int err2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err2 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,new SeqExp(dlright,null));
			  parser.errorMsg.error(err1left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
			  parser.errorMsg.error(err2left,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= LET declaration_list error IN expr_seq END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,es);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= LET declaration_list IN END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new LetExp(letexpleft,dl,new SeqExp(dlright,null));
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= LET declaration_list IN expr_seq SEMICOLON error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,es);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= LET declaration_list IN error END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,new SeqExp(dlright,null));
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LET declaration_list IN expr_seq END 
            {
              Exp RESULT = null;
		int letexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int letexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object letexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		DecList dl = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new LetExp(letexpleft,dl,es);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= BREAK 
            {
              Exp RESULT = null;
		int breakexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int breakexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object breakexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new BreakExp(breakexpleft);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= FOR ID ASSIGN expr TO expr DO expr 
            {
              Exp RESULT = null;
		int forexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int forexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object forexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp exp3 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ForExp(forexpleft,
								new VarDec(idleft,
											Symbol.symbol(id),
											new NameTy(idleft,Symbol.symbol("int")),
											exp1),
								exp2,
								exp3);
			
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= WHILE expr DO expr 
            {
              Exp RESULT = null;
		int whileexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int whileexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object whileexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new WhileExp(whileexpleft,e1,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= IF expr THEN expr ELSE expr 
            {
              Exp RESULT = null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new IfExp(ifexpleft,e1,e2,e3);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IF expr THEN expr 
            {
              Exp RESULT = null;
		int ifexpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int ifexpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object ifexp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new IfExp(ifexpleft,e1,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ID LBRACK expr RBRACK OF expr 
            {
              Exp RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new ArrayExp(tyidleft, Symbol.symbol(tyid),e1,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= ID LBRACE error RBRACE 
            {
              Exp RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new RecordExp(tyidleft,Symbol.symbol(tyid),null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= ID LBRACE RBRACE 
            {
              Exp RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new RecordExp(tyidleft,Symbol.symbol(tyid),null);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= ID LBRACE field_list COMMA error RBRACE 
            {
              Exp RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new RecordExp(tyidleft,Symbol.symbol(tyid),fl);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= ID LBRACE field_list RBRACE 
            {
              Exp RESULT = null;
		int tyidleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int tyidright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String tyid = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldExpList fl = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new RecordExp(tyidleft,Symbol.symbol(tyid),fl);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAREN RPAREN 
            {
              Exp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SeqExp(lpleft,null);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= LPAREN error RPAREN 
            {
              Exp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SeqExp(lpleft,null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LPAREN expr_seq SEMICOLON error RPAREN 
            {
              Exp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SeqExp(lpleft, es.list);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= LPAREN expr_seq RPAREN 
            {
              Exp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		SeqExp es = (SeqExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new SeqExp(lpleft, es.list);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= ID LPAREN RPAREN 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new CallExp(idleft,Symbol.symbol(id),null);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ID LPAREN error RPAREN 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new CallExp(idleft,Symbol.symbol(id),null);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= ID LPAREN expr_list COMMA error RPAREN 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new CallExp(idleft,Symbol.symbol(id),el);
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= ID LPAREN expr_list RPAREN 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ExpList el = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new CallExp(idleft,Symbol.symbol(id),el);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr OR expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.OR,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr AND expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.AND,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.LE,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr GE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.GE,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.LT,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GT expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.GT,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr NEQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.NE,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr EQ expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.EQ,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr DIVIDE expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.DIV,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr TIMES expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.MUL,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr MINUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.MINUS,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr PLUS expr 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(e1left,e1,OpExp.PLUS,e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= MINUS expr 
            {
              Exp RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new OpExp(mleft,new IntExp(mright,0),OpExp.MINUS,e);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= lvalue ASSIGN expr 
            {
              Exp RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new AssignExp(lvleft,lv,e);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= ID ASSIGN expr 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new AssignExp(idleft,new SimpleVar(idleft,Symbol.symbol(id)),e);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= lvalue 
            {
              Exp RESULT = null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Var lv = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new VarExp(lvleft,lv);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= ID 
            {
              Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new VarExp(idleft,new SimpleVar(idleft,Symbol.symbol(id)));
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= NIL 
            {
              Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new NilExp(nleft);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= INT 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new IntExp(ileft, Integer.parseInt(i));
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new StringExp(sleft, s);
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Exp RESULT = null;
		int errleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = null;
			  parser.errorMsg.error(errleft,"",ErrorMsg.ErrorType.E_SYNAXERROR);
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= expr 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
			System.out.println("start program.");
						new Print(System.out).prExp(e,5);
						RESULT = e;
						/*System.out.println();
						System.out.println("*****************");
						Semant se = new Semant(parser.errorMsg);
						se.transProg(e);*/
						
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

